CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(KIKOTSOKA_CPP CXX C)
ENABLE_TESTING()

SET(KIKOTSOKA_CPP_MAJOR 1)
SET(KIKOTSOKA_CPP_MINOR 0)
SET(KIKOTSOKA_CPP_PATCH 0)
SET(KIKOTSOKA_CPP_EXTRA "")
SET(KIKOTSOKA_CPP_VERSION "${KIKOTSOKA_CPP_MAJOR}.${KIKOTSOKA_CPP_MINOR}.${KIKOTSOKA_CPP_PATCH}")
SET(KIKOTSOKA_CPP_VERSION_SHORT "${KIKOTSOKA_CPP_MAJOR}.${KIKOTSOKA_CPP_MINOR}")
SET(KIKOTSOKA_CPP_NAME "openxum-ws-cpp")
SET(KIKOTSOKA_CPP_NAME_VERSION "${KIKOTSOKA_CPP_NAME}-${KIKOTSOKA_CPP_VERSION}")
SET(KIKOTSOKA_CPP_LOCALE_NAME "${KIKOTSOKA_CPP_NAME}-${KIKOTSOKA_CPP_MAJOR}-${KIKOTSOKA_CPP_MINOR}")
IF ("${KIKOTSOKA_CPP_EXTRA}" STREQUAL "")
  SET(KIKOTSOKA_CPP_COMPLETE "${KIKOTSOKA_CPP_MAJOR}.${KIKOTSOKA_CPP_MINOR}.${KIKOTSOKA_CPP_PATCH}")
ELSE ("${KIKOTSOKA_CPP_EXTRA}" STREQUAL "")
  SET(KIKOTSOKA_CPP_COMPLETE "${KIKOTSOKA_CPP_MAJOR}.${KIKOTSOKA_CPP_MINOR}.${KIKOTSOKA_CPP_PATCH}-${KIKOTSOKA_CPP_EXTRA}")
ENDIF ("${KIKOTSOKA_CPP_EXTRA}" STREQUAL "")
SET(KIKOTSOKA_CPP_NAME_COMPLETE "${KIKOTSOKA_CPP_NAME}-${KIKOTSOKA_CPP_COMPLETE}")

#
 # Installation variables
#

SET(KIKOTSOKA_CPP_LIBRARY_DIRS "lib/openxum-ws-cpp-${KIKOTSOKA_CPP_VERSION_SHORT}")
SET(KIKOTSOKA_CPP_INCLUDE_DIRS "include/openxum-ws-cpp-${KIKOTSOKA_CPP_VERSION_SHORT}/openxum-ws-cpp")
SET(KIKOTSOKA_CPP_INCLUDE_DIR "include/openxum-ws-cpp-${KIKOTSOKA_CPP_VERSION_SHORT}")
SET(KIKOTSOKA_CPP_MANPAGE_PATH "share/man/man1")
SET(KIKOTSOKA_CPP_SHARE_DIRS "share/openxum-ws-cpp-${KIKOTSOKA_CPP_VERSION_SHORT}")

#
 # Append the library version information to the library target
 # properties.
#

SET(KIKOTSOKA_CPP_LIBRARY_PROPERTIES VERSION 0)
SET(KIKOTSOKA_CPP_APP_PROPERTIES SOVERSION "${KIKOTSOKA_CPP_MAJOR}.${KIKOTSOKA_CPP_MINOR}"
  VERSION "${KIKOTSOKA_CPP_MAJOR}.${KIKOTSOKA_CPP_MINOR}")

#
# Append debug mode when compiler is GNU.
#

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build" FORCE)
endif ()

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -std=c++11 -pthread")

  if ("${CMAKE_BUILD_TYPE}" EQUAL "Debug" OR "${CMAKE_BUILD_TYPE}" EQUAL "RelWithDebInfo")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ggdb3")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb3")
  endif ()
endif ()

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build" FORCE)
endif ()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  add_compile_options(-fprofile-instr-generate -fcoverage-mapping)
  add_link_options(-fprofile-instr-generate)
  #Uncomment in case of linker errors
  #link_libraries(clang_rt.profile-x86_64)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  add_compile_options(--coverage)
  #Uncomment in case of linker errors
  link_libraries(gcov)
endif ()

#
 # Modules
#

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CMakeDetermineCCompiler)

#
 # Check libraries with pkgconfig
#

FIND_PACKAGE(PkgConfig REQUIRED)

#
 # Generate the config.h
#

CHECK_INCLUDE_FILE_CXX(cxxabi.h KIKOTSOKA_CPP_HAVE_GCC_ABI_DEMANGLE)
CHECK_INCLUDE_FILE_CXX(execinfo.h KIKOTSOKA_CPP_HAVE_EXECINFO)
CHECK_INCLUDE_FILE_CXX(signal.h KIKOTSOKA_CPP_HAVE_SIGNAL)
INCLUDE_DIRECTORIES(${KIKOTSOKA_CPP_BINARY_DIR})

#
 # Browse the src subdirectory
#

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(test)

#
 # Status
#

MESSAGE(STATUS "- - - -")
MESSAGE(STATUS "${KIKOTSOKA_CPP_BINARY_DIR}")
MESSAGE(STATUS "${KIKOTSOKA_CPP_NAME_COMPLETE} configured successfully")
MESSAGE(STATUS "Using ${CMAKE_INSTALL_PREFIX} for installation")
MESSAGE(STATUS "Build type ${CMAKE_BUILD_TYPE}")
IF (KIKOTSOKA_CPP_HAVE_GCC_ABI_DEMANGLE)
  MESSAGE(STATUS "Build with GCC ABI Demangle...: yes")
ENDIF (KIKOTSOKA_CPP_HAVE_GCC_ABI_DEMANGLE)
IF (KIKOTSOKA_CPP_HAVE_EXECINFO)
  MESSAGE(STATUS "Build with execinfo.h.........: yes")
ENDIF (KIKOTSOKA_CPP_HAVE_EXECINFO)
IF (Boost_FOUND)
  MESSAGE(STATUS "Build with boost..............: yes")
ENDIF (Boost_FOUND)
MESSAGE(STATUS "- - - -")